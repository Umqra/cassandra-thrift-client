<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aquiles</name>
    </assembly>
    <members>
        <member name="T:Aquiles.Command.RetrieveKeyspacesCommand">
            <summary>
            Command to retrieve the list of keyspaces for a cluster
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractCommand">
            <summary>
            Abstract Command that adds support for consistency Level over a real command
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractCommand.GetCassandraConsistencyLevel">
            <summary>
            get the consistencyLevel on Cassandra Thrift structure
            </summary>
        </member>
        <member name="P:Aquiles.Command.AbstractCommand.ConsistencyLevel">
            <summary>
            get or set the consistency level required.
            <remarks>If you dont know what is this, leave unassigned</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Command.AbstractCommand.isKeyspaceDependant">
            <summary>
            Indicates if this command applies only to a keyspace
            </summary>
        </member>
        <member name="T:Aquiles.IAquilesCommand">
            <summary>
            Interface for any AquilesCommand with minimum methods to operate with.
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Execute the command over the opened thrift client
            </summary>
            <param name="cassandraClient">an opened thrift Client</param>
        </member>
        <member name="M:Aquiles.IAquilesCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.IAquilesCommand.isKeyspaceDependant">
            <summary>
            Indicates if this command applies only to a keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeyspacesCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_keyspaces" over the connection, set the Keyspaces property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeyspacesCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeyspacesCommand.Keyspaces">
            <summary>
            get the list of keyspaces
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraClusterCollection">
            <summary>
            Configuration Collection containing Cassandra Cluster information
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.CreateNewElement">
            <summary>
            Creates and returns a new CassandraClusterElement element
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            </summary>
            <returns>a CassandraClusterElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a CassandraClusterElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">a CassandraClusterElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.IndexOf(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Given a CassandraClusterElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">a CassandraClusterElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Add(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Add CassandraClusterElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Remove(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Remove the specified CassandraClusterElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.Item(System.Int32)">
            <summary>
            returns the CassandraClusterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="index">position on the array</param>
            <returns>a CassandraClusterElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.Item(System.String)">
            <summary>
            returns the CassandraClusterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="Name">name of the element</param>
            <returns>a CassandraClusterElement</returns>
        </member>
        <member name="T:Aquiles.Configuration.AquilesTextElement">
            <summary>
            ConfigurationElement to hold text values
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesTextElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            HACK
            </summary>
            <param name="reader"></param>
            <param name="serializeCollectionKey"></param>
        </member>
        <member name="P:Aquiles.Configuration.AquilesTextElement.Text">
            <summary>
            get or set the Text (innerText) value.
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a Keyspace and a ColumnFamily
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeyspaceDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a Keyspace
            </summary>
        </member>
        <member name="P:Aquiles.Command.AbstractKeyspaceDependantCommand.isKeyspaceDependant">
            <summary>
            Indicates if this command applies only to a keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand.BuildColumnPath(System.Byte[],System.Byte[])">
            <summary>
            Build Cassandra Thrift ColumnPath
            </summary>
            <param name="supercolumn">supercolumn name</param>
            <param name="column">column name</param>
            <returns>Cassandra Thrift ColumnPath</returns>
        </member>
        <member name="M:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand.BuildColumnPath(System.String,System.Byte[],System.Byte[])">
            <summary>
            Build Cassandra Thrift ColumnPath
            </summary>
            <param name="columnFamily">columnfamily</param>
            <param name="supercolumn">supercolumn name</param>
            <param name="column">column name</param>
            <returns>Cassandra Thrift ColumnPath</returns>
        </member>
        <member name="M:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand.BuildColumnParent(System.Byte[])">
            <summary>
            Biuld Thrift ColumnParent structure using ColumnFamily and SuperColumn information
            </summary>
            <param name="superColumn">name for the supercolumn (null in case there is not one)</param>
            <returns>Thrift ColumnParent</returns>
        </member>
        <member name="P:Aquiles.Command.AbstractKeyspaceColumnFamilyDependantCommand.ColumnFamily">
            <summary>
            get or set the columnFamily
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesIndexClauseConverter">
            <summary>
            Converter for AquilesIndexClause
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.IThriftConverter`2">
            <summary>
            Interface for converter between objects structure
            </summary>
            <typeparam name="OBJECTA"></typeparam>
            <typeparam name="OBJECTB"></typeparam>
        </member>
        <member name="M:Aquiles.Converter.Model.IThriftConverter`2.Transform(`0)">
            <summary>
            Transform OBJECTA structure into OBJECTB
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.IThriftConverter`2.Transform(`1)">
            <summary>
            Transform OBJECTB structure into OBJECTA
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesIndexClauseConverter.Transform(Aquiles.Model.AquilesIndexClause)">
            <summary>
            Transform AquilesIndexClause structure into IndexClause
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesIndexClauseConverter.Transform(Apache.Cassandra.IndexClause)">
            <summary>
            Transform IndexClause structure into AquilesIndexClause
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesColumnFamilyConverter">
            <summary>
            Converter for AquilesColumnFamily
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnFamilyConverter.Transform(Aquiles.Model.AquilesColumnFamily)">
            <summary>
            Transform AquilesColumnFamily structure into CfDef
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnFamilyConverter.Transform(Apache.Cassandra.CfDef)">
            <summary>
            Transform CfDef structure into AquilesColumnFamily
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Configuration.AquilesConfigurationException">
            <summary>
            Exception thrown when there are invalid or missing values over the configuration
            </summary>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesException">
            <summary>
            Exception thrown when something went wrong inside Aquiles
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Command.AquilesConsistencyLevel">
            <summary>
            Ported Cassandra Consistency level for commands over the conection.
            <remarks>By convention this values must match Cassandra Consistency Level</remarks>
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ONE">
            <summary>
            Write: Ensure that the write has been written to at least 1 node, including hinted recipients
            Read: Will return the record returned by the first node to respond. A consistency check is always done in a background thread to fix any consistency issues when ConsistencyLevel.ONE is used. This means subsequent calls will have correct data even if the initial read gets an older value. (This is called read repair.)
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.QUORUM">
            <summary>
            Write: Ensure that the write has been written to at least 1 node's commit log and memory table before responding to the client. 
            Read: Will query all nodes and return the record with the most recent timestamp once it has at least a majority of replicas reported. Again, the remaining replicas will be checked in the background.
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.LOCAL_QUORUM">
            <summary>
            undocumented
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.EACH_QUORUM">
            <summary>
            undocumented
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ALL">
            <summary>
            Write: Ensure that the write is written to all ReplicationFactor nodes before responding to the client. Any unresponsive nodes will fail the operation
            Read: Will query all nodes and return the record with the most recent timestamp once all nodes have replied. Any unresponsive nodes will fail the operation
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ANY">
            <summary>
            Write: Ensure that the write has been written to at least 1 node, including hinted recipients. 
            Read: Not supported. You probably want ONE instead. 
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSliceRange">
            <summary>
            Aquiles structure to contains Cassandra Slice Range structure
            </summary>
        </member>
        <member name="T:Aquiles.Model.IAquilesObject">
            <summary>
            Interface for model object in order to support common methods
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.Count">
            <summary>
            get or set how many columns to return.
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.StartColumn">
            <summary>
            get or set the column name to start the slice with
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.FinishColumn">
            <summary>
            get or set the column name to finish the slice with
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.Reversed">
            <summary>
            get or set if the order of the result should be reversed
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumnFamilyType">
            <summary>
            Type of ColumnFamily
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesColumnFamilyType.Standard">
            <summary>
            only allows Columns as childs
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesColumnFamilyType.Super">
            <summary>
            only allows SuperColumns as childs
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumnDefinition">
            <summary>
            Aquiles structure to contains Cassandra Column structure definition (for schema administration)
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnDefinition.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnDefinition.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnDefinition.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnDefinition.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in a Query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnDefinition.Name">
            <summary>
            get or set the Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnDefinition.IndexName">
            <summary>
            get or set the Index Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnDefinition.IsIndex">
            <summary>
            get or set if this Column is part of an index
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnDefinition.ValidationClass">
            <summary>
            get or set the Validation Class
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.AquilesConfigurationSection">
            <summary>
            ConfigurationSection for Aquiles
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationSection.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.AquilesConfigurationSection.LoggingManager">
            <summary>
            get or set the type of the client class to use for logging purpose
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.AquilesConfigurationSection.CassandraClusters">
            <summary>
            get or set the collection of clusters
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.GUIDEncoderHelper">
            <summary>
            Encoder Helper for Guids
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.IByteEncoderHelper`1">
            <summary>
            Interface for Byte Encoder
            </summary>
            <typeparam name="TYPE">class type applied</typeparam>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.IByteEncoderHelper`1.ToByteArray(`0)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.IByteEncoderHelper`1.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.GUIDEncoderHelper.ToByteArray(System.Guid)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.GUIDEncoderHelper.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="T:Aquiles.Command.LoginCommand">
            <summary>
            Command to login to a cluster to operate against the given Keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.LoginCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "login" over the connection.
            <remarks>In case the login fails, posible login exceptions are AuthenticationException, AuthorizationException</remarks>
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.LoginCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.LoginCommand.Credentials">
            <summary>
            get or set the Credential information
            <remarks>It's a key-value map</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Command.MultiGetCountCommand">
            <summary>
            Command to retrieve a Column or SuperColumn from Keyspace of a given cluster with the given key
            </summary>
        </member>
        <member name="M:Aquiles.Command.MultiGetCountCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_count" over the connection. Return values are set into Output
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.MultiGetCountCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetCountCommand.Keys">
            <summary>
            get or set the list of keys
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetCountCommand.SuperColumnName">
            <summary>
            get or set the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetCountCommand.Output">
            <summary>
            get the count retrieved per key after command execution
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetCountCommand.Predicate">
            <summary>
            get or set the predicate to match for the action
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesDeletionMutation">
            <summary>
            Mutation to support elimination
            </summary>
        </member>
        <member name="T:Aquiles.Model.IAquilesMutation">
            <summary>
            Interface of Mutations
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.SuperColumn">
            <summary>
            get or set SuperColumn Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.Timestamp">
            <summary>
            get or set SuperColumn Timestamp
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.Predicate">
            <summary>
            get or set the predicate to match for the action
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesKeyspace">
            <summary>
            Aquiles representation of a Keyspace
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesKeyspace.SIMPLESTRATEGY">
            <summary>
            org.apache.cassandra.locator.SimpleStrategy
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesKeyspace.NETWORKTOPOLOGYSTRATEGY">
            <summary>
            org.apache.cassandra.locator.NetworkTopologyStrategy
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesKeyspace.OLDNETWORKTOPOLOGYSTRATEGY">
            <summary>
            org.apache.cassandra.locator.OldNetworkTopologyStrategy
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyspace.#ctor">
            <summary>
            Creates an AquilesKeyspace with predefined default values
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyspace.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyspace.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyspace.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyspace.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in a Query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.Name">
            <summary>
            get or set Name.
            <remarks>"system" and "definitions" are reserved for Cassandra Internals.</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.ColumnFamilies">
            <summary>
            get or set Dictionary of ColumnFamilies where key is the name of the ColumnFamily
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.ReplicationFactor">
            <summary>
            get or set the Number of replicas of each row
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.ReplicationPlacementStrategy">
            <summary>
            get or set the class that determines how replicas are distributed among nodes
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.ReplicationPlacementStrategyOptions">
            <summary>
            get or set the configuration information for the strategy selected
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.SpecialConnectionParameterCollection">
            <summary>
            Configuration Collection containing special connection parameters
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.CreateNewElement">
            <summary>
            Creates and returns a new SpecialConnectionParameterElement element
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            </summary>
            <returns>a SpecialConnectionParameterElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a SpecialConnectionParameterElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">a SpecialConnectionParameterElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.IndexOf(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Given a SpecialConnectionParameterElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">a SpecialConnectionParameterElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Add(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Add SpecialConnectionParameterElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Remove(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Remove the specified SpecialConnectionParameterElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.Item(System.Int32)">
            <summary>
            returns the SpecialConnectionParameterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="index">position on the array</param>
            <returns>a SpecialConnectionParameterElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.Item(System.String)">
            <summary>
            returns the SpecialConnectionParameterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="Name">name of the element</param>
            <returns>a SpecialConnectionParameterElement</returns>
        </member>
        <member name="T:Aquiles.Configuration.CassandraEndpointCollection">
            <summary>
            Configuration Collection containing cassandraEndpoints
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.CreateNewElement">
            <summary>
            Creates and returns a new CassandraEndpointElement element
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            </summary>
            <returns>a CassandraEndpointElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a CassandraEndpointElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">a CassandraEndpointElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.IndexOf(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Given a CassandraEndpointElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">a CassandraEndpointElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Add(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Add CassandraEndpointElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Remove(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Remove the specified CassandraEndpointElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.Item(System.Int32)">
            <summary>
            returns the CassandraEndpointElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="index">position on the array</param>
            <returns>a CassandraEndpointElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.Item(System.String)">
            <summary>
            returns the CassandraEndpointElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="Name">name of the element</param>
            <returns>a CassandraEndpointElement</returns>
        </member>
        <member name="T:Aquiles.Configuration.CassandraClusterElement">
            <summary>
            ConfigurationElement holding Cluster information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.FriendlyName">
            <summary>
            get or set the Friendly name
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.Connection">
            <summary>
            get or set the Connection configuration
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.EndpointManager">
            <summary>
            get or set the endpoint manager configuration
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesKeyspaceConverter">
            <summary>
            Converter for AquilesKeyspace
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesKeyspaceConverter.Transform(Aquiles.Model.AquilesKeyspace)">
            <summary>
            Transform AquilesKeyspace structure into KsDef
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesKeyspaceConverter.Transform(Apache.Cassandra.KsDef)">
            <summary>
            Transform KsDef structure into AquilesKeyspace
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.GetCommand">
            <summary>
            Command to retrieve a Column or SuperColumn from Keyspace of a given cluster with the given key
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeyspaceColumnFamilyKeyDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a Keyspace, a ColumnFamily and a Key
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeyspaceColumnFamilyKeyDependantCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.AbstractKeyspaceColumnFamilyKeyDependantCommand.Key">
            <summary>
            get or set the Key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get" over the connection. Return values are set into Output
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Output">
            <summary>
            get the return value
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.SuperColumnName">
            <summary>
            get or set the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.ColumnName">
            <summary>
            get or set the ColumnName
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Out.Column">
            <summary>
            get or set Column Information
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Out.SuperColumn">
            <summary>
            get or set SuperColumn Information
            </summary>
        </member>
        <member name="T:Aquiles.AquilesHelper">
            <summary>
            Static class to use as entrypoint for Aquiles. 
            Responsability: 
                * Manage cluster configuration
                * Manage connection creation
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.Initialize">
            <summary>
            Read the configuration section, create logger, create clusters
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.RetrieveConnection(System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, an AquilesException is thrown.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="M:Aquiles.AquilesHelper.RetrieveConnection(System.String,System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, an AquilesException is thrown.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <param name="keyspace">name of the keyspace to connect to</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="M:Aquiles.AquilesHelper.RetrieveInformation(System.String)">
            <summary>
            Retrieve information for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, an AquilesException is thrown.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <returns>it returns a read-only information (you may still change this information, though it will not impact on the engine.</returns>
        </member>
        <member name="M:Aquiles.AquilesHelper.#ctor">
            <summary>
            private instance constructor that calls Initialize
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.InstanceInitialize">
            <summary>
            Read the configuration section, create logger, create clusters
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.CreateClusters">
            <summary>
            Create clusters within configuration
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.CreateLogger">
            <summary>
            Create an instance of the logger type from config file
            <remarks>can throw <see cref="T:Aquiles.Configuration.AquilesConfigurationException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.InstanceRetrieveConnection(System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, a null is returned.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="M:Aquiles.AquilesHelper.InstanceRetrieveConnection(System.String,System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, a null is returned.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <param name="keyspace">name of the keyspace to connect to</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.UTF8EncoderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.UTF8EncoderHelper.ToByteArray(System.String)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.UTF8EncoderHelper.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesSliceRangeConverter">
            <summary>
            Converter for AquilesSliceRange
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSliceRangeConverter.Transform(Aquiles.Model.AquilesSliceRange)">
            <summary>
            Transform AquilesSliceRange structure into SliceRange
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSliceRangeConverter.Transform(Apache.Cassandra.SliceRange)">
            <summary>
            Transform SliceRange structure into AquilesSliceRange
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Model.AquilesColumnFamily">
            <summary>
            Aquiles structure to hold Keyspace's columnFamily internal information
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnFamily.#ctor">
            <summary>
            Creates an AquilesColumnFamily with predefined default values
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnFamily.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnFamily.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnFamily.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumnFamily.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in a Query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Name">
            <summary>
            get or set Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Type">
            <summary>
            get or set the ColumnFamilyType
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Comment">
            <summary>
            get or set the comment
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Comparator">
            <summary>
            get or set the Comparator to be used with Columns
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.GCGraceSeconds">
            <summary>
            get or set the time to wait before garbage collecting tombstones (deletion markers). 
            <remarks>defaults to 864000 (10days). See http://wiki.apache.org/cassandra/DistributedDeletes</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.KeyCachedSize">
            <summary>
            get or set the the number of keys per sstable whose locations we keep in memory in "mostly LRU" order.
            <remarks>this only cache keys, not columns. Specify a fraction (value less than 1) or an absolute number of keys to cache</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Keyspace">
            <summary>
            get or set the parent Keyspace 
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.ReadRepairChance">
            <summary>
            get or set the probability with which read repairs should be invoked on non-quorum reads.  
            <remarks>value must be between 0 and 1</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.RowCacheSize">
            <summary>
            get or set the the number of rows whose entire contents we cache in memory. 
            <remarks>Do not use this on ColumnFamilies with large rows, or ColumnFamilies with high write:read ratios. Specify a fraction (value less than 1) or an absolute number of rows to cache.</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.SubComparator">
            <summary>
            get or set the Comparator to be used with SubColumns
            <remarks>this is used when the columnFamily is set as Super</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Columns">
            <summary>
            get or set the list of Column Definitions
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Id">
            <summary>
            get or set the Id
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.MinimumCompactationThreshold">
            <summary>
            get or set the minimum tables to merge together
            <remarks> The min and max boundaries are the number of tables to attempt to merge together at once. Raising the minimum will make minor compactions take more memory and run less often, lowering the maximum will have the opposite effect. Default for this value is 4.</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.MaximumCompactationThreshold">
            <summary>
            get or set the maximum tables to merge together
            <remarks> The min and max boundaries are the number of tables to attempt to merge together at once. Raising the minimum will make minor compactions take more memory and run less often, lowering the maximum will have the opposite effect. Default for this value is 32.</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.DefaultValidationClass">
            <summary>
            get or set the default validation class
            <remarks>Used in conjunction with the validation_class property in the per-column settings to guarantee the type of a column value</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.RowCacheSavePeriodInSeconds">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.KeyCacheSavePeriodInSeconds">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.MemtableFlushAfterMins">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.MemtableThroughputInMb">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.MemtableOperationsInMillions">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Pooling.ConnectionPoolType">
            <summary>
            Type of ConnectionPool
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Pooling.ConnectionPoolType.NOPOOL">
            <summary>
            No pool is used. Clients are created based on need, they are disposed as soon as they are returned.
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Pooling.ConnectionPoolType.SIZECONTROLLEDPOOL">
            <summary>
            Warmup enable and size-controlled enabled pool.
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Factory.ConnectionFactoryType">
            <summary>
            Type of connection used to connect to Cassandra Cluster
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Factory.ConnectionFactoryType.DEFAULT">
            <summary>
            Default connection. It use binary protocol over socket transport
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Factory.ConnectionFactoryType.BUFFERED">
            <summary>
            Buffered connection. It use binary protocol over buffered transport (This is faster than Default)
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Factory.ConnectionFactoryType.FRAMED">
            <summary>
            Framed connection. It use binary protocol over framed transport (if you are connecting to a nonblocking server (like Java's TNonblockingServer and THsHaServer) 
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraEndpointElement">
            <summary>
            Configuration Element to hold cassandra endpoint information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Address">
            <summary>
            get or set the address
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Port">
            <summary>
            get or set the Port
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Timeout">
            <summary>
            get or set the timeout
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.ByteEncoderHelper">
            <summary>
            Encoder Helper 
            </summary>
        </member>
        <member name="F:Aquiles.Helpers.Encoders.ByteEncoderHelper.LongEncoder">
            <summary>
            Encoder Helper for Long
            </summary>
        </member>
        <member name="F:Aquiles.Helpers.Encoders.ByteEncoderHelper.ASCIIEncoder">
            <summary>
            Encoder Helper for ASCII
            </summary>
        </member>
        <member name="F:Aquiles.Helpers.Encoders.ByteEncoderHelper.UTF8Encoder">
            <summary>
            Encoder Helper for UTF8
            </summary>
        </member>
        <member name="F:Aquiles.Helpers.Encoders.ByteEncoderHelper.GuidEncoder">
            <summary>
            Encoder Helper for GUID
            </summary>
        </member>
        <member name="F:Aquiles.Helpers.Encoders.ByteEncoderHelper.UUIDEnconder">
            <summary>
            Encoder Helper for UUID
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesMutationConverter">
            <summary>
            Converter for AquilesMutation
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesMutationConverter.Transform(Aquiles.Model.IAquilesMutation)">
            <summary>
            Transform IAquilesMutation structure into Mutation
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesMutationConverter.Transform(Apache.Cassandra.Mutation)">
            <summary>
            Transform Mutation structure into IAquilesMutation
            Not implemented! Why would you need this??? 
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesIndexExpressionConverter">
            <summary>
            Converter for AquilesIndexExpression
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesIndexExpressionConverter.Transform(Aquiles.Model.AquilesIndexExpression)">
            <summary>
            Transform AquilesIndexExpression structure into IndexExpression
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesIndexExpressionConverter.Transform(Apache.Cassandra.IndexExpression)">
            <summary>
            Transform IndexExpression structure into AquilesIndexExpression
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.GetSliceCommand">
            <summary>
            Command to retrieve slices of data on the given key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_slice" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetSliceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Out.Results">
            <summary>
            get or set the results 
            </summary>
        </member>
        <member name="T:Aquiles.Command.DescribeSplitsCommand">
            <summary>
            Command to describe key splits from a given ColumnFamily.
            <remarks>experimental API for hadoop/parallel query support.  May change violently and without warning.</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Command.DescribeSplitsCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_splits" over the connection. Returns list of token strings such that first subrange is (list[0], list[1]], next is (list[1], list[2]], etc.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.DescribeSplitsCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeSplitsCommand.StartToken">
            <summary>
            get or set the start token 
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeSplitsCommand.EndToken">
            <summary>
            get or set the end token 
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeSplitsCommand.KeysPerSplit">
            <summary>
            get or set key quantity per split.
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeSplitsCommand.Output">
            <summary>
            returns list of token strings such that first subrange is (list[0], list[1]], next is (list[1], list[2]], etc.
            </summary>
        </member>
        <member name="T:Aquiles.Model.CassandraClusterInformation">
            <summary>
            Information of a Cluster
            </summary>
        </member>
        <member name="P:Aquiles.Model.CassandraClusterInformation.Partioner">
            <summary>
            get or set the Partioner used on this cluster
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesIndexOperator">
            <summary>
            Aquiles structure to support for Cassandra IndexOperator structure
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesIndexOperator.EQ">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesIndexOperator.GTE">
            <summary>
            Greater than or Equals
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesIndexOperator.GT">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesIndexOperator.LTE">
            <summary>
            Lower than or Equals
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesIndexOperator.LT">
            <summary>
            Lower than
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesClusterInformation">
            <summary>
            Gives information about the cluster in runtime
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesClusterInformation.LocalConfiguration">
            <summary>
            get the local configuration for this cluster.
            <remarks>this is information is read-only. Any change made will not impact on the cluster</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesClusterInformation.RemoteConfiguration">
            <summary>
            get the remote configuration of the cluster
            <remarks>this is information is read-only. Any change made will not impact on the cluster</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Command.InsertCommand">
            <summary>
            Command to insert a Column into a Keyspace of a given cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "insert" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.InsertCommand.SuperColumn">
            <summary>
            get or set the name of the supercolumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.InsertCommand.Column">
            <summary>
            get or set the column information
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.SpecialConnectionParameterElement">
            <summary>
            Configuration Element holding special connection parameters
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterElement.Key">
            <summary>
            get or set the Key for the special connection parameters (must be unique in the collection)
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterElement.Value">
            <summary>
            get or set the value for the special connection parameters 
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.UUIDEncoderHelper">
            <summary>
            Encoder Helper for UUIDs (Guids that are compatible with UUID java version)
            <remarks>see http://coderjournal.com/2010/05/timeuuid-only-makes-sense-with-version-1-uuids/</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.UUIDEncoderHelper.ToByteArray(System.Guid)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.UUIDEncoderHelper.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="T:Aquiles.Command.GetKeyRangeSliceCommand">
            <summary>
            Command to retrieve slices of data on each of the given keys in parallel
            </summary>                    
        </member>
        <member name="M:Aquiles.Command.GetKeyRangeSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_range_slices" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetKeyRangeSliceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.KeyTokenRange">
            <summary>
            get or set the Key / Token range to retrieve
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetKeyRangeSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Out.Key">
            <summary>
            get or set the Key value
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Out.Columns">
            <summary>
            get or set the columns (or SuperColumns) within a key 
            </summary>
        </member>
        <member name="T:Aquiles.Command.System.DropColumnFamilyCommand">
            <summary>
            Command to remove a ColumnFamily within a Keyspace into a Cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.DropColumnFamilyCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_drop_column_family" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.DropColumnFamilyCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.DropColumnFamilyCommand.ColumnFamily">
            <summary>
            Get or Set the ColumnFamily
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.DropColumnFamilyCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
        <member name="T:Aquiles.Command.BatchMutateCommand">
            <summary>
            Command to batch actions over a Keyspace of a Cluster.
            Posible actions are:
                - insert
                - delete
            </summary>
        </member>
        <member name="M:Aquiles.Command.BatchMutateCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "batch_mutate" over the connection. No return values
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.BatchMutateCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.BatchMutateCommand.Mutations">
            <summary>
            get or set Mutation actions to be applied
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesTokenRange">
            <summary>
            Aquiles structure to contains Cassandra Key Range structure (only support for a Token range get)
            <remarks>EndToken might be equal of smaller than the StartToken. If EndToken is equal to StartToken then you will get the full ring</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.StartToken">
            <summary>
            get or set the Start Token (excluded in the command response)
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.EndToken">
            <summary>
            get or set the End Token
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.Endpoints">
            <summary>
            get or set the list of endpoints (nodes) that replace data in the TokenRange
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveClusterNameCommand">
            <summary>
            Command to retrieve the ClusterName from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterNameCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_cluster_name" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterNameCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveClusterNameCommand.ClusterName">
            <summary>
            Get the ClusterName
            </summary>
        </member>
        <member name="T:Aquiles.Converter.ModelConverterHelper">
            <summary>
            Helper class to avoid creating Converters everytime needed.
            </summary>
        </member>
        <member name="M:Aquiles.Converter.ModelConverterHelper.Convert``2(``1)">
            <summary>
            convert from OBJECTA structure to OBJECTB structure
            </summary>
            <typeparam name="OBJECTA"></typeparam>
            <typeparam name="OBJECTB"></typeparam>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.ModelConverterHelper.Convert``2(``0)">
            <summary>
            converts from OBJECTA structure to OBJECTB structure
            </summary>
            <typeparam name="OBJECTA"></typeparam>
            <typeparam name="OBJECTB"></typeparam>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.ILogger">
            <summary>
            Interface with the required methods to be able to log over Aquiles 
            </summary>
        </member>
        <member name="M:Aquiles.ILogger.Fatal(System.String,System.Object)">
            <summary>
            Fatal information before crashing
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Fatal(System.String,System.Object,System.Exception)">
            <summary>
            Fatal information before crashing
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Error(System.String,System.Object)">
            <summary>
            Error information (this might be overcome)
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Error(System.String,System.Object,System.Exception)">
            <summary>
            Error information (this might be overcome)
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Warn(System.String,System.Object)">
            <summary>
            Warning information (something went wrong, it was supposed to go right).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Warn(System.String,System.Object,System.Exception)">
            <summary>
            Warning information (something went wrong, it was supposed to go right).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Info(System.String,System.Object)">
            <summary>
            information (something we must be aware of).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Info(System.String,System.Object,System.Exception)">
            <summary>
            information (something we must be aware of).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Trace(System.String,System.Object)">
            <summary>
            Trace (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Trace(System.String,System.Object,System.Exception)">
            <summary>
            Trace (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Debug(System.String,System.Object)">
            <summary>
            Debug (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Debug(System.String,System.Object,System.Exception)">
            <summary>
            Debug (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesCommandException">
            <summary>
            Exception thrown when a command input parameters are not valid
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.ConnectionElement">
            <summary>
            Configuration Element holding connection information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.PoolType">
            <summary>
            get or set pool Type
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.FactoryType">
            <summary>
            get or set factory type
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.SpecialConnectionParameters">
            <summary>
            get or set collection of special parameters
            </summary>
        </member>
        <member name="T:Aquiles.Command.DescribeKeyspaceCommand">
            <summary>
            Command to retrieve Keyspace structure from cluster.
            </summary>
        </member>
        <member name="M:Aquiles.Command.DescribeKeyspaceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_keyspace" over the connection.
            
            Note: This command is not yet finished.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.DescribeKeyspaceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeKeyspaceCommand.Keyspace">
            <summary>
            get or set the Keyspace
            </summary>
        </member>
        <member name="P:Aquiles.Command.DescribeKeyspaceCommand.KeyspaceInformation">
            <summary>
            get Dictionary of ColumnFamilies where key is the name of the ColumnFamily
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.LongEncoderHelper">
            <summary>
            Encoder Helper for Long
            </summary>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.LongEncoderHelper.ToByteArray(System.Int64)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.LongEncoderHelper.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesColumnConverter">
            <summary>
            Converter for AquilesColumn
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnConverter.Transform(Aquiles.Model.AquilesColumn)">
            <summary>
            Transform AquilesColumn structure into Column
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnConverter.Transform(Apache.Cassandra.Column)">
            <summary>
            Transform Column structure into AquilesColumn
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.System.AddColumnFamilyCommand">
            <summary>
            Command to add a ColumnFamily into an existent Keyspace within a Cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.AddColumnFamilyCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_add_column_family" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.AddColumnFamilyCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.AddColumnFamilyCommand.ColumnFamilyDefinition">
            <summary>
            Get or Set the ColumnFamilyDefinition
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.AddColumnFamilyCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumn">
            <summary>
            Aquiles structure to contains Cassandra Column structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in a Query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ToString">
            <summary>
            overriding ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.ColumnName">
            <summary>
            Cassandra column name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.Value">
            <summary>
            Cassandra column value
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.Timestamp">
            <summary>
            Cassandra Column TimeStamp (must match unix timestamp)
            <remarks>Don't mess with this unless you know what you are doing</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.TTL">
            <summary>
            get or set the Time To Live
            <remarks>If this value is null (not set) then the column will not be evicted and needs to be removed by a DeleteCommand</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.IAquilesConnection">
            <summary>
            Interface for any AquilesConnection with minimum methods to operate with.
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Open">
            <summary>
            Retrieves an opened connection from the cluster's pool. 
            <remarks>When calling this method explicity, automatic command retry is not posible. Using this methods delegates the close responsability to the client using the conection.</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Close">
            <summary>
            Release or invalidate (depends on the status of the connection) the opened connection to the cluster's pool.
            <remarks>When calling tihs method explicity, a previous open method must be called from client code.</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Execute(Aquiles.IAquilesCommand)">
            <summary>
            Execute the <see cref="T:Aquiles.IAquilesCommand"/> over the connection.
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            <remarks>It validates the command before proceeding, so it might throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> if there are malformed or missing input params.</remarks>
            </summary>
            <param name="command">command to be executed. Must implement IAquilesCommand</param>
        </member>
        <member name="P:Aquiles.IAquilesConnection.Keyspace">
            <summary>
            Get the keyspace, if any, associated with this connection
            </summary>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesCommandParameterException">
            <summary>
            Exception thrown when a command input parameters are not valid
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesKeyRangeConverter">
            <summary>
            Converter for AquilesKeyRange
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesKeyRangeConverter.Transform(Aquiles.Model.AquilesKeyRange)">
            <summary>
            Transform AquilesKeyRange structure into KeyRange
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesKeyRangeConverter.Transform(Apache.Cassandra.KeyRange)">
            <summary>
            Transform KeyRange structure into AquilesKeyRange
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.MultiGetSliceCommand">
            <summary>
            Command to retrieve slices of data on each of the given keys in parallel
            </summary>                    
        </member>
        <member name="M:Aquiles.Command.MultiGetSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "multiget_slice" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.MultiGetSliceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Keys">
            <summary>
            get or set the list of Keys to retrieve
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.MultiGetSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Out.Results">
            <summary>
            get or set the results 
            <remarks>the dictionary key is actually the key used over cassandra</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSetMutation">
            <summary>
            Mutation to support set and updage
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSetMutation.Column">
            <summary>
            get or set Column information to be inserted
            <remarks>Column and SuperColumn are mutual exclusive</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSetMutation.SuperColumn">
            <summary>
            get or set the SuperColumn information to be inserted
            <remarks>Column and SuperColumn are mutual exclusive</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.Encoders.ASCIIEncoderHelper">
            <summary>
            Encoder Helper for ASCII
            </summary>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.ASCIIEncoderHelper.ToByteArray(System.String)">
            <summary>
            Transform a value into a Byte Array
            </summary>
            <param name="value">value to be transformed</param>
            <returns>a byte[]</returns>
        </member>
        <member name="M:Aquiles.Helpers.Encoders.ASCIIEncoderHelper.FromByteArray(System.Byte[])">
            <summary>
            get an instance with the value from the byte[]
            </summary>
            <param name="value">the byte[] with data</param>
            <returns>a new object</returns>
        </member>
        <member name="T:Aquiles.Helpers.GuidGenerator">
            <summary>
            GuidGenerator from managed fusion/fluentcassandra
            <remarks>http://github.com/managedfusion/managedfusion/raw/master/Source/GuidGenerator.cs
            It was modified by me to use DateTimePrecise
            </remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Helpers.GuidGenerator.GenerateTimeBasedGuid">
            <summary>
            Generate a Time based Guid using Datetime.UtcNow
            </summary>
            <returns>a GUID</returns>
        </member>
        <member name="M:Aquiles.Helpers.GuidGenerator.GenerateTimeBasedGuid(System.DateTime)">
            <summary>
            Generate a Time based Guid using given Datetime (converted into UtcNow first)
            </summary>
            <returns>a GUID</returns>
        </member>
        <member name="M:Aquiles.Helpers.GuidGenerator.GenerateTimeBasedGuid(Aquiles.Helpers.DateTimePrecise)">
            <summary>
            Generate a Time based Guid using given DatetimePrecise (converted into UtcNow first)
            </summary>
            <returns>a GUID</returns>
        </member>
        <member name="M:Aquiles.Helpers.GuidGenerator.GenerateTimeBasedGuid(System.Int64,System.Byte[])">
            <summary>
            Generate a Time based Guid using given Datetime (converted into UtcNow first)
            </summary>
            <returns>a GUID</returns>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesColumnDefinitionConverter">
            <summary>
            Converter for AquilesColumnDefinition
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnDefinitionConverter.Transform(Aquiles.Model.AquilesColumnDefinition)">
            <summary>
            Transform AquilesColumnDefinition structure into ColumnDef
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesColumnDefinitionConverter.Transform(Apache.Cassandra.ColumnDef)">
            <summary>
            Transform ColumnDef structure into AquilesColumnDefinition
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.RetrieveClusterPartitionerCommand">
            <summary>
            Command to retrieve the partitioner for a cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterPartitionerCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_partitioner" over the connection, set the Partitioner property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterPartitionerCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveClusterPartitionerCommand.Partitioner">
            <summary>
            get the configured Partitioner
            </summary>
        </member>
        <member name="T:Aquiles.Command.TruncateColumnFamilyCommand">
            <summary>
            Command to truncate a ColumnFamily within a Keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.TruncateColumnFamilyCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "truncate" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.TruncateColumnFamilyCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="T:Aquiles.Command.System.DescribeSnitchCommand">
            <summary>
            Command to describe snitch from the cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.DescribeSnitchCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_snitch" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.DescribeSnitchCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.DescribeSnitchCommand.Output">
            <summary>
            get return value
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesKeyRange">
            <summary>
            Aquiles structure to contains Cassandra Key Range structure (only support for a key range get)
            <remarks>StartKey will be included in the response</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.StartKey">
            <summary>
            get or set the Start Key (included in the command response)
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.EndKey">
            <summary>
            get or set the Endkey
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.Count">
            <summary>
            get or set how many keys to permit in the KeyRange
            </summary>
        </member>
        <member name="T:Aquiles.Helpers.DateTimePrecise">
            DateTimePrecise provides a way to get a DateTime that exhibits the
            relative precision of
            System.Diagnostics.Stopwatch, and the absolute accuracy of DateTime.Now.
        </member>
        <member name="M:Aquiles.Helpers.DateTimePrecise.#ctor(System.Int64)">
            Creates a new instance of DateTimePrecise.
            A large value of synchronizePeriodSeconds may cause arithmetic overthrow
            exceptions to be thrown. A small value may cause the time to be unstable.
            A good value is 10.
            synchronizePeriodSeconds = The number of seconds after which the
            DateTimePrecise will synchronize itself with the system clock.
        </member>
        <member name="F:Aquiles.Helpers.DateTimePrecise.Stopwatch">
            The internal System.Diagnostics.Stopwatch used by this instance.
        </member>
        <member name="P:Aquiles.Helpers.DateTimePrecise.UtcNow">
            Returns the current date and time, just like DateTime.UtcNow.
        </member>
        <member name="P:Aquiles.Helpers.DateTimePrecise.Now">
            Returns the current date and time, just like DateTime.Now.
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesSuperColumnConverter">
            <summary>
            Converter for AquilesSuperColumn
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSuperColumnConverter.Transform(Aquiles.Model.AquilesSuperColumn)">
            <summary>
            Transform AquilesSuperColumn structure into SuperColumn
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSuperColumnConverter.Transform(Apache.Cassandra.SuperColumn)">
            <summary>
            Transform SuperColumn structure into AquilesSuperColumn
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.System.UpdateColumnFamilyCommand">
            <summary>
            Command to udpate a ColumnFamily structure within an existent Keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.UpdateColumnFamilyCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_update_column_family" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.UpdateColumnFamilyCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.UpdateColumnFamilyCommand.ColumnFamilyDefinition">
            <summary>
            Get or Set the ColumnFamilyDefinition
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.UpdateColumnFamilyCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesIndexClause">
            <summary>
            Aquiles structure to contains Cassandra IndexClause structure
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexClause.Expressions">
            <summary>
            Get or set the list of IndexExpressions to AND together. 
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexClause.StartKey">
            <summary>
            Get or set the start key range to begin searching on
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexClause.Count">
            <summary>
            Get or set the maximum rows to return
            <remarks>Default value is 100</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.EndpointManagerElement">
            <summary>
            Configuration element to hold endpointManager information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.Type">
            <summary>
            get or set the type to use
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.CassandraEndpoints">
            <summary>
            get or set the collection of CassandraEndpoints
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.DefaultTimeout">
            <summary>
            get or set the DefaultTime to be used when the CassandraEndpoint does not explicity declare one.
            </summary>
        </member>
        <member name="T:Aquiles.Command.System.DropKeyspaceCommand">
            <summary>
            Command to remove a Keyspace into a Cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.DropKeyspaceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_drop_keyspace" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.DropKeyspaceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.DropKeyspaceCommand.Keyspace">
            <summary>
            Get or Set the keyspace
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.DropKeyspaceCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSlicePredicate">
            <summary>
             Aquiles structure to contains Cassandra Slice Predicate structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSlicePredicate.Columns">
            <summary>
            get or set the List of Column Names
            <remarks>Columns anr SliceRange are are mutually exclusive</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSlicePredicate.SliceRange">
            <summary>
            get or set the SliceRange
            <remarks>Columns anr SliceRange are are mutually exclusive</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesIndexExpression">
            <summary>
            Aquiles structure to contains Cassandra IndexExpression structure
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexExpression.ColumnName">
            <summary>
            Get or set the ColumnName to perform the operand on
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexExpression.IndexOperator">
            <summary>
            Get or set the IndexOperator to apply
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesIndexExpression.Value">
            <summary>
            get or set the Value to use in the comparison
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Endpoint.EndpointManagerType">
            <summary>
            Types of EndpointManagers to use
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Endpoint.EndpointManagerType.ROUNDROBIN">
            <summary>
            Cycle through the list of endpoints to balance the pool connections
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesSlicePredicateConverter">
            <summary>
            Converter for AquilesSlicePredicate
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSlicePredicateConverter.Transform(Aquiles.Model.AquilesSlicePredicate)">
            <summary>
            Transform AquilesSlicePredicate structure into SlicePredicate
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesSlicePredicateConverter.Transform(Apache.Cassandra.SlicePredicate)">
            <summary>
            Transform SlicePredicate structure into AquilesSlicePredicate
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.System.SchemaAgreementCommand">
            <summary>
            Command to retrieve node agreements over keyspaces schemas
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.SchemaAgreementCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_schema_versions" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.SchemaAgreementCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.SchemaAgreementCommand.Output">
            <summary>
            get Dictionary of Keyspace agreements where key is the version (higher versions are the new ones) of the schemas and the value is the list of nodes that agreeds.
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetCountCommand">
            <summary>
            Command to retrieve a Column or SuperColumn from Keyspace of a given cluster with the given key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCountCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_count" over the connection. Return values are set into Output
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetCountCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCountCommand.SuperColumnName">
            <summary>
            get or set the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCountCommand.Count">
            <summary>
            get the count retrieved after command execution
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCountCommand.Predicate">
            <summary>
            get or set the predicate to match for the action
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveClusterVersionCommand">
            <summary>
            Command to retrieve the Cassandra version from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterVersionCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_version" over the connection, set the Version property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterVersionCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveClusterVersionCommand.Version">
            <summary>
            Get the Cassandra version
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetIndexedSlicesCommand">
            <summary>
            Command to returns a list of key slices that meets the IndexClause critera. 
            <remarks>
            Note that index clause must contain at least a single EQ operation. 
            The columns specified in the IndexExpressions will also need to be specified as indexed when the CF is created.
            </remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetIndexedSlicesCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_indexed_slices" over the connection.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetIndexedSlicesCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.Predicate">
            <summary>
            get or set the predicate to match for the action
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.IndexClause">
            <summary>
            get or set the index clause (search criteria)
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetIndexedSlicesCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.Out.Key">
            <summary>
            get or set the Key value
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetIndexedSlicesCommand.Out.Columns">
            <summary>
            get or set the columns (or SuperColumns) within a key 
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSuperColumn">
            <summary>
            Aquiles structure to contains Cassandra SuperColumn structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ToString">
            <summary>
            overriding ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aquiles.Model.AquilesSuperColumn.Columns">
            <summary>
            get or set a List of columns
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSuperColumn.Name">
            <summary>
            get or set the name
            </summary>
        </member>
        <member name="T:Aquiles.Command.DeleteCommand">
            <summary>
            Command to delete a Column, SuperColumn or a Key from Keyspace of a given cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "remove" over the connection. No return values
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.DeleteCommand.SuperColumnName">
            <summary>
            get or set supercolumn name
            </summary>
        </member>
        <member name="P:Aquiles.Command.DeleteCommand.Column">
            <summary>
            get or set Column information
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveKeyspaceDistributionComand">
            <summary>
            Command to retrieve the keyspace's token distribution over the nodes from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeyspaceDistributionComand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_ring" over the connection, set the Version property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeyspaceDistributionComand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeyspaceDistributionComand.Keyspace">
            <summary>
            get or set the Keyspace
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeyspaceDistributionComand.Output">
            <summary>
            Get the TokenRanges information
            </summary>
        </member>
        <member name="T:Aquiles.Converter.Model.Impl.AquilesTokenRangeConverter">
            <summary>
            Converter for AquilesKeyRange
            </summary>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesTokenRangeConverter.Transform(Aquiles.Model.AquilesTokenRange)">
            <summary>
            Transform AquilesTokenRange structure into TokenRange
            </summary>
            <param name="objectA"></param>
            <returns></returns>
        </member>
        <member name="M:Aquiles.Converter.Model.Impl.AquilesTokenRangeConverter.Transform(Apache.Cassandra.TokenRange)">
            <summary>
            Transform TokenRange structure into AquilesTokenRange
            </summary>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="T:Aquiles.Command.System.UpdateKeyspaceCommand">
            <summary>
            Command to update a Keyspace structure from a Cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.UpdateKeyspaceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_update_keyspace" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.UpdateKeyspaceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.UpdateKeyspaceCommand.KeyspaceDefinition">
            <summary>
            Get or Set the KeyspaceDefinition
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.UpdateKeyspaceCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
        <member name="T:Aquiles.Command.System.AddKeyspaceCommand">
            <summary>
            Command to add a Keyspace into a Cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.System.AddKeyspaceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "system_add_keyspace" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.System.AddKeyspaceCommand.ValidateInput">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.AddKeyspaceCommand.KeyspaceDefinition">
            <summary>
            Get or Set the KeyspaceDefinition
            </summary>
        </member>
        <member name="P:Aquiles.Command.System.AddKeyspaceCommand.Output">
            <summary>
            get the command output
            </summary>
        </member>
    </members>
</doc>
